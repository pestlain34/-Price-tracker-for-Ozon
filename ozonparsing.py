import time
from datetime import datetime
import requests
from selenium import webdriver
import csv
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import matplotlib.pyplot as plt
from dotenv import load_dotenv
import os
load_dotenv()

def build_price_chart(target_name):
    df = pd.read_csv('price.csv', delimiter = ';' , quotechar='"' ,encoding = 'utf-8-sig')
    df.rename(columns = {
        "–ù–∞–∑–≤–∞–Ω–∏–µ_–≤–µ—â–∏": "name",
        "–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö": "price",
        "–î–∞—Ç–∞": "timestamp"
    } , inplace = True)
    df['timestamp'] = pd.to_datetime(df['timestamp'] ,format='%Y-%m-%dT%H:%M:%S.%f')
    filtered = df[df['name'] == target_name]
    if filtered.empty:
        print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {target_name}")
        return
    grouped = df.groupby("name")
    plt.figure(figsize=(10, 6))
    plt.plot(filtered['timestamp'], filtered['price'], label=target_name)

    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶–µ–Ω–∞ (‚ÇΩ)")
    plt.title(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤: {target_name}")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig("price_chart.png")
    plt.close()
def send_graph_photo():
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    CHAT_ID = os.getenv('CHAT_ID')
    bot_token = TELEGRAM_TOKEN
    chat_id = CHAT_ID
    url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
    with open('price_chart.png' , 'rb') as photo:
        payload = {
            "chat_id": chat_id,
            "caption": "üìà –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω"
        }
        files = {
            "photo": photo
        }
        requests.post(url, data=payload, files=files)
def send_telegram_message(message):
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    CHAT_ID = os.getenv('CHAT_ID')
    bot_token = TELEGRAM_TOKEN
    chat_id = CHAT_ID
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    requests.post(url , data=payload)

def find_min_price(current_name):
    min_price = float('inf')
    with open('price.csv' , 'r' , newline = '' , encoding = 'utf-8-sig') as f:
        reader = csv.reader(f , delimiter = ';')
        next(reader)
        for row in reader:
            name , price, date = row
            priceint = int(price)
            if name == current_name:
                min_price = min(min_price , priceint)
    return min_price

def check_price():

    driver = webdriver.Chrome(service=service, options=options)
    print("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –æ–∑–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://www.ozon.ru/product/beysbolka-1725325406/ ")
    urlinput = str(input())
    driver.get(urlinput)
    driver.maximize_window()
    initial_title = driver.title
    WebDriverWait(driver, 3).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "[data-widget='webProductHeading'] h1"))
    )
    final_title = driver.title
    print(driver.title)
    print(driver.current_url)
    curprice = WebDriverWait(driver , 3).until(EC.presence_of_element_located((By.CSS_SELECTOR , "[data-widget='webPrice'] span")))
    curname = driver.find_element(By.CSS_SELECTOR, "[data-widget='webProductHeading'] h1")
    curnametext = curname.text
    curpricetext = curprice.text
    price_digits = ''.join(filter(str.isdigit, curpricetext))
    curpriceint = int(price_digits)
    with open('price.csv' , 'a', newline = '' , encoding = 'utf-8-sig') as file:
        writer = csv.writer(file, delimiter = ';' ,quoting=csv.QUOTE_NONNUMERIC)
        writer.writerow([curnametext , curpriceint, datetime.now().isoformat()])
    min_price = find_min_price(curnametext)
    if(curpriceint < min_price):
        send_telegram_message(f"üîª –¶–µ–Ω–∞ —É–ø–∞–ª–∞!\n\n<b>{curnametext}</b>\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {curpriceint}‚ÇΩ \n\nURL: <b>{driver.current_url}</b>")
    elif (curpriceint == min_price):
        send_telegram_message(f"üîª –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!\n\n<b>{curnametext}</b>\n–¶–µ–Ω–∞: {curpriceint}‚ÇΩ \n\nURL:<b>{driver.current_url}</b>")
    else:
        send_telegram_message(f"üîª –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞!\n\n<b>{curnametext}</b>\n –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {curpriceint}‚ÇΩ \n\nURL:<b>{driver.current_url}</b>")
    build_price_chart(curnametext)
    send_graph_photo()
    driver.quit()

options = Options()
options.add_experimental_option("detach", True)
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--remote-allow-origins=*")
options.add_argument("--disable-renderer-backgrounding")
options.add_argument("--disable-background-timer-throttling")
user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
options.add_argument(f"user-agent={user_agent}")
service = Service(ChromeDriverManager().install())
while True:
    print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    try:
        check_price()

    except Exception as –µ:
        print(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {–µ}")

    print("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
    time.sleep(3600)

